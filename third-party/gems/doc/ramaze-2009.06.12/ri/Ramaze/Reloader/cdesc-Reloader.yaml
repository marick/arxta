--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: High performant source reloader
- !ruby/struct:SM::Flow::P 
  body: This class acts as Rack middleware.
- !ruby/struct:SM::Flow::P 
  body: It does not depend on Ramaze itself, but you might have to adjust the Reloader::Hooks module or include your own module to override the hooks. You also might have to set the Log constant.
- !ruby/struct:SM::Flow::P 
  body: Currently, it uses RInotify if available and falls back to using File.stat.
- !ruby/struct:SM::Flow::P 
  body: Please note that this will not reload files in the background, it does so only when actively called In case of Ramaze it is performing a check/reload cycle at the start of every request, but also respects a cool down time, during which nothing will be done.
- !ruby/struct:SM::Flow::P 
  body: After every reload the OPTIONS hash will be checked for changed options and assigned to the instance, so you may change options during the lifetime of your application.
- !ruby/struct:SM::Flow::P 
  body: A number of hooks will be executed during the reload cycle, see Ramaze::ReloaderHooks for more information.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: OPTIONS
  value: "{       # At most check every n seconds       # nil/false will never trigger the reload cycle       # 0 will cycle on every call       :cooldown => 2,        # Compiled files cannot be reloaded during runtime       :ignore => /\\.so$/,        # Run cycle in a Thread.exclusive, by default no threads are used.       :thread => false,        # If you assign a block here it will be instance_evaled instead of       # calling cycle. This allows you to use for example EventMachine for       # well performing asynchronous cycling.       :control => nil, # lambda{ cycle },     }"
- !ruby/object:RI::Constant 
  comment: 
  name: Watcher
  value: WatchInotify
- !ruby/object:RI::Constant 
  comment: 
  name: Watcher
  value: WatchStat
full_name: Ramaze::Reloader
includes: 
- !ruby/object:RI::IncludedModule 
  name: Hooks
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: call
- !ruby/object:RI::MethodSummary 
  name: cycle
- !ruby/object:RI::MethodSummary 
  name: figure_path
- !ruby/object:RI::MethodSummary 
  name: options_reload
- !ruby/object:RI::MethodSummary 
  name: rotation
- !ruby/object:RI::MethodSummary 
  name: safe_load
name: Reloader
superclass: Object
