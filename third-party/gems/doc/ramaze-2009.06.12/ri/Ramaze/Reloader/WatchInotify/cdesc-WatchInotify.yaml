--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: "TODO:"
- !ruby/struct:SM::Flow::VERB 
  body: "  * There seems to be a problem somewhere that I couldn't identify yet, a\n    file has to be modified twice initially to make it show up as\n    modified here, subsequent changes work just fine.\n    The only workaround I could find right now would be to read/write\n    every single file, but that would be unexpected, irresponsible, and\n    error-prone.\n"
- !ruby/struct:SM::Flow::P 
  body: "NOTE:"
- !ruby/struct:SM::Flow::VERB 
  body: "  * I have changed from using a Mutex to using a Queue, which uses a\n    Mutex internally.\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: POLL_INTERVAL
  value: "2"
- !ruby/object:RI::Constant 
  comment: 
  name: NOTIFY_MASK
  value: RInotify::MODIFY | RInotify::IN_ONESHOT
full_name: Ramaze::Reloader::WatchInotify
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: call
- !ruby/object:RI::MethodSummary 
  name: changed_files
- !ruby/object:RI::MethodSummary 
  name: close
- !ruby/object:RI::MethodSummary 
  name: remove_watch
- !ruby/object:RI::MethodSummary 
  name: start_watcher
- !ruby/object:RI::MethodSummary 
  name: watch
- !ruby/object:RI::MethodSummary 
  name: watcher_cycle
name: WatchInotify
superclass: Object
