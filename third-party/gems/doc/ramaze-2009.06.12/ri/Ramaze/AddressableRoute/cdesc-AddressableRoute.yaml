--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: map
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: This is a simple prototype-implementation of how we could do routing supported by URI templates.
- !ruby/struct:SM::Flow::P 
  body: Please see the spec for example usage as it's not integrated yet in any way.
- !ruby/struct:SM::Flow::P 
  body: What it does is basically that you can give it any URI template and a final mapping, and it will extract the variables from the URI and merge them into the QUERY_STRING, which is parsed again in Ramaze if you issue Request#params.
- !ruby/struct:SM::Flow::P 
  body: "@example given mapping like:"
- !ruby/struct:SM::Flow::VERB 
  body: "    map('/customer/{customer_id}/order/{order_id}', '/order/show')\n"
- !ruby/struct:SM::Flow::P 
  body: "@example output of request.params at '/order/show'"
- !ruby/struct:SM::Flow::VERB 
  body: "    {'customer_id =&gt; '12', 'order_id' =&gt; '15'}\n"
- !ruby/struct:SM::Flow::P 
  body: I haven't explored the full capabilities of the templates yet, but the specs of Addressable::Template suggest that there is a lot to be discovered.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: ROUTES
  value: "{}"
full_name: Ramaze::AddressableRoute
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: call
- !ruby/object:RI::MethodSummary 
  name: dispatch
name: AddressableRoute
superclass: Object
