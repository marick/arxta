--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: location
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: name
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: options
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: url_map
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: find_or_create
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: App is the superclass for applications and acts as their prototype when it comes to configuration.
- !ruby/struct:SM::Flow::P 
  body: An application consists of options, a location, and a list of objects. The objects are usually {Controller}s.
- !ruby/struct:SM::Flow::P 
  body: The options are inherited, the basics are set in Ramaze.options, from there to Ramaze::App.options, and finally into every instance of App.
- !ruby/struct:SM::Flow::P 
  body: This allows to collect {Controller}s of your application into a common group that can easily be used in other applications, while retaining the original options.
- !ruby/struct:SM::Flow::P 
  body: "Every instance of {App} is mapped in {AppMap}, which is the default location to #call from Rack."
- !ruby/struct:SM::Flow::P 
  body: Additionally, every {App} can have custom locations for root/public/view/layout directories, which allows reuse beyond directory boundaries.
- !ruby/struct:SM::Flow::P 
  body: In contrast to Innate, where all Nodes share the same middleware, {App} also has a subset of middleware that handles serving static files, routes and rewrites.
- !ruby/struct:SM::Flow::P 
  body: To indicate that a {Controller} belongs to a specific application, you can pass a second argument to {Controller::map}
- !ruby/struct:SM::Flow::P 
  body: "@example adding Controller to application"
- !ruby/struct:SM::Flow::VERB 
  body: "  class WikiController &lt; Ramaze::Controller\n    map '/', :wiki\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: The App instance will be created for you and if you don't use any other applications in your code there is nothing else you have to do. Others can now come and simply reuse your code in their own applications.
- !ruby/struct:SM::Flow::P 
  body: There is some risk of name collisions if everybody calls their app `:wiki`, but given that you only use one foreign app of this kind might give less reason for concern.
- !ruby/struct:SM::Flow::P 
  body: If you still try to use two apps with the same name, you have to be careful, loading one first, renaming it, then loading the second one.
- !ruby/struct:SM::Flow::P 
  body: The naming of an App has no influence on any other aspects of dispatching or configuration.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: APP_LIST
  value: "{}"
full_name: Ramaze::App
includes: 
- !ruby/object:RI::IncludedModule 
  name: Innate::Optioned
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: call
- !ruby/object:RI::MethodSummary 
  name: location=
- !ruby/object:RI::MethodSummary 
  name: map
- !ruby/object:RI::MethodSummary 
  name: public_roots
- !ruby/object:RI::MethodSummary 
  name: sync
- !ruby/object:RI::MethodSummary 
  name: to
- !ruby/object:RI::MethodSummary 
  name: to_app
name: App
superclass: Object
