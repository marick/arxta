--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: options
  rw: RW
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: acquire
- !ruby/object:RI::MethodSummary 
  name: const_missing
- !ruby/object:RI::MethodSummary 
  name: deprecated
- !ruby/object:RI::MethodSummary 
  name: plugin
- !ruby/object:RI::MethodSummary 
  name: setup
- !ruby/object:RI::MethodSummary 
  name: to
comment: 
- !ruby/struct:SM::Flow::P 
  body: Namespace for Ramaze
- !ruby/struct:SM::Flow::P 
  body: "THINK:"
- !ruby/struct:SM::Flow::VERB 
  body: "  * for now, we don't extend this with Innate to keep things clean. But we\n    should eventually do it for a simple API, or people always have to find\n    out whether something is in Innate or Ramaze.\n    No matter which way we go, we should keep references point to the\n    original location to avoid too much confusion for core developers.\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: An application is a collection of controllers and options that have a common name. Every application has a location it dispatches from, this behaves similar to Rack::URLMap.
  name: AppMap
  value: Innate::URLMap.new
- !ruby/object:RI::Constant 
  comment: 
  name: Cache
  value: Innate::Cache
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Constant for storing meta-information persistent
  name: OpenIDStore
  value: OpenID::Store::Filesystem.new(openid_store_file)
- !ruby/object:RI::Constant 
  comment: 
  name: Helper
  value: Innate::Helper
- !ruby/object:RI::Constant 
  comment: 
  name: Log
  value: Innate::Log
- !ruby/object:RI::Constant 
  comment: 
  name: DEPRECATED_CONSTANTS
  value: "{     :BASEDIR        => :ROOT,     :Template       => :View,     :Optional       => :Optioned,   }"
- !ruby/object:RI::Constant 
  comment: 
  name: VERSION
  value: "\"2009.06.12\""
- !ruby/object:RI::Constant 
  comment: 
  name: View
  value: Innate::View
- !ruby/object:RI::Constant 
  comment: 
  name: ROOT
  value: File.expand_path(File.dirname(__FILE__)) unless defined?(Ramaze::ROOT)
full_name: Ramaze
includes: []

instance_methods: []

name: Ramaze
superclass: 
