--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: This awesome piece of hackery implements action AOP.
- !ruby/struct:SM::Flow::P 
  body: The so-called aspects are simply methods that may yield the next aspect in the chain, this is similar to racks concept of middleware, but instead of initializing with an app we simply pass a block that may be yielded with the action being processed.
- !ruby/struct:SM::Flow::P 
  body: This gives us things like logging, caching, aspects, authentication, etc.
- !ruby/struct:SM::Flow::P 
  body: Add the name of your method to the trait[:wrap] to add your own method to the wrap_action_call chain.
- !ruby/struct:SM::Flow::P 
  body: "@example adding your method"
- !ruby/struct:SM::Flow::VERB 
  body: "  class MyNode\n    Innate.node '/'\n\n    private\n\n    def wrap_logging(action)\n      Innate::Log.info(&quot;Executing #{action.name}&quot;)\n      yield\n    end\n\n    trait[:wrap]\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: methods may register themself in the trait[:wrap] and will be called in left-to-right order, each being passed the action instance and a block that they have to yield to continue the chain.
- !ruby/struct:SM::Flow::P 
  body: "@param [Action] action instance that is being passed to every registered method @param [Proc] block contains the instructions to call the action method if any"
- !ruby/struct:SM::Flow::P 
  body: "@see Action#render @author manveru"
full_name: Innate::Helper::Aspect#wrap_action_call
is_singleton: false
name: wrap_action_call
params: (action, &block)
visibility: public
