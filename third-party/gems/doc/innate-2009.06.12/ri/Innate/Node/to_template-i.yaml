--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Try to find a template at the given <tt>path</tt> for <tt>wish</tt>.
- !ruby/struct:SM::Flow::P 
  body: Since Innate supports multiple paths to templates the <tt>path</tt> has to be an Array that may be nested one level.
- !ruby/struct:SM::Flow::P 
  body: "@example Usage to find available templates"
- !ruby/struct:SM::Flow::VERB 
  body: "  # This assumes following files:\n  # view/foo.erb\n  # view/bar.erb\n  # view/bar.rss.erb\n  # view/bar.yaml.erb\n\n  class FooBar\n    Innate.node('/')\n  end\n\n  FooBar.to_template(['.', 'view', '/', 'foo'], 'html')\n  # =&gt; &quot;./view/foo.erb&quot;\n  FooBar.to_template(['.', 'view', '/', 'foo'], 'yaml')\n  # =&gt; &quot;./view/foo.erb&quot;\n  FooBar.to_template(['.', 'view', '/', 'foo'], 'rss')\n  # =&gt; &quot;./view/foo.erb&quot;\n\n  FooBar.to_template(['.', 'view', '/', 'bar'], 'html')\n  # =&gt; &quot;./view/bar.erb&quot;\n  FooBar.to_template(['.', 'view', '/', 'bar'], 'yaml')\n  # =&gt; &quot;./view/bar.yaml.erb&quot;\n  FooBar.to_template(['.', 'view', '/', 'bar'], 'rss')\n  # =&gt; &quot;./view/bar.rss.erb&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "@param [Array&lt;Array&lt;String&gt;&gt;, Array&lt;String&gt;] path"
- !ruby/struct:SM::Flow::VERB 
  body: "  array containing strings and nested (1 level) arrays containing strings\n"
- !ruby/struct:SM::Flow::P 
  body: "@param [String] wish"
- !ruby/struct:SM::Flow::P 
  body: "@return [nil, String] relative path to the first template found"
- !ruby/struct:SM::Flow::P 
  body: "@api external @see Node#find_view Node#to_layout Node#find_aliased_view @author manveru"
full_name: Innate::Node#to_template
is_singleton: false
name: to_template
params: (path, wish)
visibility: public
