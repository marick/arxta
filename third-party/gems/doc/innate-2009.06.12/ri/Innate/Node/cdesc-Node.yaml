--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: layout_templates
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: method_arities
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: view_templates
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: generate_mapping
- !ruby/object:RI::MethodSummary 
  name: included
- !ruby/object:RI::MethodSummary 
  name: setup
comment: 
- !ruby/struct:SM::Flow::P 
  body: The nervous system of {Innate}, so you can relax.
- !ruby/struct:SM::Flow::P 
  body: Node may be included into any class to make it a valid responder to requests.
- !ruby/struct:SM::Flow::P 
  body: The major difference between this and the old Ramaze controller is that every Node acts as a standalone application with its own dispatcher.
- !ruby/struct:SM::Flow::P 
  body: What's also an important difference is the fact that {Node} is a module, so we don't have to spend a lot of time designing the perfect subclassing scheme.
- !ruby/struct:SM::Flow::P 
  body: This makes dispatching more fun, avoids a lot of processing that is done by {Rack} anyway and lets you tailor your application down to the last action exactly the way you want without worrying about side-effects to other {Node}s.
- !ruby/struct:SM::Flow::P 
  body: Upon inclusion, it will also include {Innate::Trinity} and {Innate::Helper} to provide you with {Innate::Request}, {Innate::Response}, {Innate::Session} instances, and all the standard helper methods as well as the ability to simply add other helpers.
- !ruby/struct:SM::Flow::P 
  body: Please note that method_missing will <em>not</em> be considered when building an {Action}. There might be future demand for this, but for now you can simply use `def index(*args); end` to make a catch-all action.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: NODE_LIST
  value: Set.new
full_name: Innate::Node
includes: 
- !ruby/object:RI::IncludedModule 
  name: Traited
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: action_found
- !ruby/object:RI::MethodSummary 
  name: action_missing
- !ruby/object:RI::MethodSummary 
  name: alias_view
- !ruby/object:RI::MethodSummary 
  name: binding
- !ruby/object:RI::MethodSummary 
  name: call
- !ruby/object:RI::MethodSummary 
  name: fill_action
- !ruby/object:RI::MethodSummary 
  name: find_aliased_view
- !ruby/object:RI::MethodSummary 
  name: find_layout
- !ruby/object:RI::MethodSummary 
  name: find_method
- !ruby/object:RI::MethodSummary 
  name: find_provide
- !ruby/object:RI::MethodSummary 
  name: find_view
- !ruby/object:RI::MethodSummary 
  name: layout
- !ruby/object:RI::MethodSummary 
  name: layout_mappings
- !ruby/object:RI::MethodSummary 
  name: map
- !ruby/object:RI::MethodSummary 
  name: map_layouts
- !ruby/object:RI::MethodSummary 
  name: map_views
- !ruby/object:RI::MethodSummary 
  name: mapping
- !ruby/object:RI::MethodSummary 
  name: needs_method?
- !ruby/object:RI::MethodSummary 
  name: options
- !ruby/object:RI::MethodSummary 
  name: patterns_for
- !ruby/object:RI::MethodSummary 
  name: possible_exts_for
- !ruby/object:RI::MethodSummary 
  name: possible_paths_for
- !ruby/object:RI::MethodSummary 
  name: provide
- !ruby/object:RI::MethodSummary 
  name: provide_set?
- !ruby/object:RI::MethodSummary 
  name: provides
- !ruby/object:RI::MethodSummary 
  name: resolve
- !ruby/object:RI::MethodSummary 
  name: root_mappings
- !ruby/object:RI::MethodSummary 
  name: to_layout
- !ruby/object:RI::MethodSummary 
  name: to_template
- !ruby/object:RI::MethodSummary 
  name: to_view
- !ruby/object:RI::MethodSummary 
  name: try_resolve
- !ruby/object:RI::MethodSummary 
  name: update_layout_mappings
- !ruby/object:RI::MethodSummary 
  name: update_mapping_shared
- !ruby/object:RI::MethodSummary 
  name: update_method_arities
- !ruby/object:RI::MethodSummary 
  name: update_template_mappings
- !ruby/object:RI::MethodSummary 
  name: update_view_mappings
- !ruby/object:RI::MethodSummary 
  name: view_mappings
name: Node
superclass: 
