--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: (action_name, params)
comment: 
- !ruby/struct:SM::Flow::P 
  body: The innate beauty in Nitro, Ramaze, and {Innate}.
- !ruby/struct:SM::Flow::P 
  body: Will yield the name of the action and parameter for the action method in order of significance.
- !ruby/struct:SM::Flow::VERB 
  body: "  def foo__bar # responds to /foo/bar\n  def foo(bar) # also responds to /foo/bar\n"
- !ruby/struct:SM::Flow::P 
  body: But foo__bar takes precedence because it's more explicit.
- !ruby/struct:SM::Flow::P 
  body: The last fallback will always be the index action with all of the path turned into parameters.
- !ruby/struct:SM::Flow::P 
  body: "@example yielding possible combinations of action names and params"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Foo; include Innate::Node; map '/'; end\n\n  Foo.patterns_for('/'){|action, params| p action =&gt; params }\n  # =&gt; {&quot;index&quot;=&gt;[]}\n\n  Foo.patterns_for('/foo/bar'){|action, params| p action =&gt; params }\n  # =&gt; {&quot;foo__bar&quot;=&gt;[]}\n  # =&gt; {&quot;foo&quot;=&gt;[&quot;bar&quot;]}\n  # =&gt; {&quot;index&quot;=&gt;[&quot;foo&quot;, &quot;bar&quot;]}\n\n  Foo.patterns_for('/foo/bar/baz'){|action, params| p action =&gt; params }\n  # =&gt; {&quot;foo__bar__baz&quot;=&gt;[]}\n  # =&gt; {&quot;foo__bar&quot;=&gt;[&quot;baz&quot;]}\n  # =&gt; {&quot;foo&quot;=&gt;[&quot;bar&quot;, &quot;baz&quot;]}\n  # =&gt; {&quot;index&quot;=&gt;[&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]}\n"
- !ruby/struct:SM::Flow::P 
  body: "@param [String, #split] path usually the PATH_INFO"
- !ruby/struct:SM::Flow::P 
  body: "@return [Action] it actually returns the first non-nil/false result of yield"
- !ruby/struct:SM::Flow::P 
  body: "@api internal @see Node#fill_action @author manveru"
full_name: Innate::Node#patterns_for
is_singleton: false
name: patterns_for
params: (path) {|action_name, params| ...}
visibility: public
