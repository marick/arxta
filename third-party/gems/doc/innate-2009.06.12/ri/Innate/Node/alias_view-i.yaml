--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Aliasing one view from another. The aliases are inherited, and the optional third <tt>node</tt> parameter indicates the Node to take the view from.
- !ruby/struct:SM::Flow::P 
  body: The argument order is identical with `alias` and `alias_method`, which quite honestly confuses me, but at least we stay consistent.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Foo\n    include Innate::Node\n\n    # Use the 'foo' view when calling 'bar'\n    alias_view 'bar', 'foo'\n\n    # Use the 'foo' view from FooBar node when calling 'bar'\n    alias_view 'bar', 'foo', FooBar\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Note that the parameters have been simplified in comparision with Ramaze::Controller::template where the second parameter may be a Controller or the name of the template. We take that now as an optional third parameter.
- !ruby/struct:SM::Flow::P 
  body: "@param [#to_s] to view that should be replaced @param [#to_s] from view to use or Node. @param [#nil?, Node] node optionally obtain view from this Node"
- !ruby/struct:SM::Flow::P 
  body: "@api external @see Node::find_aliased_view @author manveru"
full_name: Innate::Node#alias_view
is_singleton: false
name: alias_view
params: (to, from, node = nil)
visibility: public
