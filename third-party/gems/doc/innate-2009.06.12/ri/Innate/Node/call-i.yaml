--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: This makes the Node a valid application for Rack. <tt>env</tt> is the environment hash passed from the Rack::Handler
- !ruby/struct:SM::Flow::P 
  body: We rely on correct PATH_INFO.
- !ruby/struct:SM::Flow::P 
  body: As defined by the Rack spec, PATH_INFO may be empty if it wants the root of the application, so we insert '/' to make our dispatcher simple.
- !ruby/struct:SM::Flow::P 
  body: Innate will not rescue any errors for you or do any error handling, this should be done by an underlying middleware.
- !ruby/struct:SM::Flow::P 
  body: We do however log errors at some vital points in order to provide you with feedback in your logs.
- !ruby/struct:SM::Flow::P 
  body: "A lot of functionality in here relies on the fact that call is executed within Current#call which populates the variables used by Trinity. So if you use the Node directly as a middleware make sure that you #use Innate::Current as a middleware before it."
- !ruby/struct:SM::Flow::P 
  body: "@param [Hash] env"
- !ruby/struct:SM::Flow::P 
  body: "@return [Array]"
- !ruby/struct:SM::Flow::P 
  body: "@api external @see Response#reset Node#try_resolve Session#flush @author manveru"
full_name: Innate::Node#call
is_singleton: false
name: call
params: (env)
visibility: public
