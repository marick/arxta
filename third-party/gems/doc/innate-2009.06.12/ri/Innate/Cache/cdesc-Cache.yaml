--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: instance
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: name
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: add
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: register
- !ruby/object:RI::MethodSummary 
  name: setup
comment: 
- !ruby/struct:SM::Flow::P 
  body: Cache manager and wrapper.
- !ruby/struct:SM::Flow::P 
  body: Provides a convenient wrapper around caches to keep method name confusion at a minimum while still having short and meaningful method names for every cache instance.
- !ruby/struct:SM::Flow::P 
  body: The default caching is specified in lib/innate.rb in the config section. At the time of writing it defaults to Innate::Cache::Memory but can be changed easily.
- !ruby/struct:SM::Flow::P 
  body: Configuration has to be done before Innate::setup_dependencies is being called.
- !ruby/struct:SM::Flow::P 
  body: "Configuration:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Innate::Cache.options do |cache|\n    cache.names = [:session, :user]\n    cache.session = Innate::Cache::Marshal\n    cache.user = Innate::Cache::YAML\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "Usage for storing:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # Storing with a time to live (10 seconds)\n  Innate::Cache.user.store(:manveru, &quot;Michael Fellinger&quot;, :ttl =&gt; 10)\n\n  # Storing indefinitely\n  Innate::Cache.user[:Pistos] = &quot;unknown&quot;\n  # or without :ttl argument\n  Innate::Cache.user.store(:Pistos, &quot;unknown&quot;)\n"
- !ruby/struct:SM::Flow::P 
  body: "Usage for retrieving:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # we stored this one for 10 seconds\n  Innate::Cache.user.fetch(:manveru, 'not here anymore')\n  # =&gt; &quot;Michael Fellinger&quot;\n  sleep 11\n  Innate::Cache.user.fetch(:manveru, 'not here anymore')\n  # =&gt; &quot;not here anymore&quot;\n\n  Innate::Cache.user[:Pistos]\n  # =&gt; &quot;unknown&quot;\n  Innate::Cache.user.fetch(:Pistos)\n  # =&gt; &quot;unknown&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: For more details and to find out how to implement your own cache please read the documentation of Innate::Cache::API
- !ruby/struct:SM::Flow::P 
  body: "NOTE:"
- !ruby/struct:SM::Flow::VERB 
  body: "  * Some caches might expose their contents for everyone else on the same\n    system, or even on connected systems. The rule as usual is, not to\n    cache sensitive information.\n"
constants: []

full_name: Innate::Cache
includes: 
- !ruby/object:RI::IncludedModule 
  name: Optioned
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: "[]="
- !ruby/object:RI::MethodSummary 
  name: clear
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: fetch
- !ruby/object:RI::MethodSummary 
  name: store
name: Cache
superclass: Object
