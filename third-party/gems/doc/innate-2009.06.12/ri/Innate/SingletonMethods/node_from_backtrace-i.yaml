--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Cheap hack that works reasonably well to avoid passing self all the time to Innate::node We simply search the file that Innate::node was called in for the first class definition above the line that Innate::node was called and look up the constant. If there are any problems with this (filenames containing ':' or metaprogramming) just pass the node parameter explicitly to Innate::node
- !ruby/struct:SM::Flow::P 
  body: "@param [Array&lt;String&gt;, #[]] backtrace"
- !ruby/struct:SM::Flow::P 
  body: "@return [Class, Module]"
- !ruby/struct:SM::Flow::P 
  body: "@api internal @see SingletonMethods::node @author manveru"
full_name: Innate::SingletonMethods#node_from_backtrace
is_singleton: false
name: node_from_backtrace
params: (backtrace)
visibility: public
