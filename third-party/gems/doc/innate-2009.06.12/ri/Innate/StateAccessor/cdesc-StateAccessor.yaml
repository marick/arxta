--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: each
comment: 
- !ruby/struct:SM::Flow::P 
  body: Simplify accessing Thread.current variables.
- !ruby/struct:SM::Flow::P 
  body: "Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Foo\n    include Innate::StateAccessor\n    state_accessor :session\n\n    def calculate\n      session[:num1] + session[:num2]\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Foo#calculate can now be called from anywhere in your application and it will have direct access to the session in the current request/response cycle in a thread-safe way without the need to explicitly pass the session along.
constants: []

full_name: Innate::StateAccessor
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: state_accessor
- !ruby/object:RI::MethodSummary 
  name: state_reader
- !ruby/object:RI::MethodSummary 
  name: state_writer
name: StateAccessor
superclass: 
